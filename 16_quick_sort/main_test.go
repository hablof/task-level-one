package main

import (
	"fmt"
	"sort"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_qsort3(t *testing.T) {

	t.Run("integers", func(t *testing.T) {

		tests := []struct {
			arr []int
		}{
			{
				arr: []int{0, 0, 0, 0, 2, 2, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 77, 7, 7, 7, 155},
			},
			{
				arr: []int{0, 12, 4, 6, 8, 10, 2, 1, 3, 5, 5, 5, 5, 7, 9, 11, 13},
			},
			{
				arr: []int{3308, 61516, -96197, -3453, -80457, -96504, 56176, -73422, 23700, 69452, -58671, -37962, 53112, -36300, -64809, 58708, 56362},
			},
			{
				arr: []int{-100156, 22721, 93835, 76603, 94454, 9317, 14245, -10571},
			},
			{
				arr: []int{57, 25, 30, 43, 18, 89, 54, 52, 64, 67, 82, 49, 88, 12, 15, 24, 22, 78, 35, 37},
			},
			{
				arr: []int{0, 687356, 67432, 9687465, 46214, 946, 654567, 5646, 5, 7, 5, 48, 1, 55, 4},
			},
		}
		for i, tt := range tests {
			t.Run(fmt.Sprint(i), func(t *testing.T) {
				arr2 := make([]int, len(tt.arr))
				copy(arr2, tt.arr)
				sort.Ints(arr2)

				qsort3(tt.arr)

				assert.Equal(t, arr2, tt.arr)
			})
		}
	})

	t.Run("floats", func(t *testing.T) {
		tests := []struct {
			arr []float64
		}{
			{
				arr: []float64{0.0, 0.0, 0, 0, 2, 2, 0, 0, 0, 5.5, 5, 5, 5.5, 5, 5.5, 5, 5, 7, 7, 77, 7, 7, 7, 155},
			},
			{
				arr: []float64{0, 12, 4, 6, 8, 10, 2, 1, 3, 5, 5, 5, 5, 7, 9.4, 1.1, 13},
			},
			{
				arr: []float64{330.8, 61516, -961.97, -34.53, -80457, -965.04, 56176, -73.422, 23700, 69452, -58671, -37962, 53112, -36300, -64809, 58708, 56362},
			},
			{
				arr: []float64{-100156, 22721, 93.835, 76603, 9.4454, 9317, 14245, -10571},
			},
			{
				arr: []float64{57, 2.5, 30, 4.3, 18, 89, 54, 52, 6.4, 67, 82, 4.9, 88, 1.2, 15, 24, 22, 78, 35, 37},
			},
			{
				arr: []float64{0, 687356, 67.432, 968746.5, 0.46214, 946, 654567, 5646, 5, 7, 5, 48, 1, 55, 4},
			},
		}
		for i, tt := range tests {
			t.Run(fmt.Sprint(i), func(t *testing.T) {
				arr2 := make([]float64, len(tt.arr))
				copy(arr2, tt.arr)
				sort.Float64s(arr2)

				qsort3(tt.arr)

				assert.Equal(t, arr2, tt.arr)
			})
		}
	})

	t.Run("strings", func(t *testing.T) {
		tests := []struct {
			arr []string
		}{
			{
				arr: strings.Split("И́мпульсный стабилизатор напряжения (импульсный преобразователь, импульсный источник питания) — стабилизатор напряжения, в котором регулирующий элемент (ключ) работает в импульсном режиме, то есть регулирующий элемент периодически открывается и закрывается", " "),
			},
			{
				arr: strings.Split("Параметризуем эту функцию для работы с разными типами, вместо типа float64 добавив список с одним параметром типа T", " "),
			},
			{
				arr: strings.Split("Интернет-магазин Wildberries – это доступные цены, широкий, регулярно обновляемый ассортимент", " "),
			},
			{
				arr: strings.Split("Деятельность по приобретению опыта работы или повышению квалификации по специальности, а также работа по специальности в течение определённого срока", " "),
			},
			{
				arr: strings.Split("Система воспитания и обучения личности, а также совокупность приобретаемых знаний, умений, навыков, ценностных установок, функций, опыта деятельности и компетенций", " "),
			},
		}
		for i, tt := range tests {
			t.Run(fmt.Sprint(i), func(t *testing.T) {
				arr2 := make([]string, len(tt.arr))
				copy(arr2, tt.arr)
				sort.Strings(arr2)

				qsort3(tt.arr)

				assert.Equal(t, arr2, tt.arr)
			})
		}
	})
}
